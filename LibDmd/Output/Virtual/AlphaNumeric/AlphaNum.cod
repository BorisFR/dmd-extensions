//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float NumChars;
//   float NumLines;
//   float NumSegments;
//   float SegmentWidth;
//   float TargetHeight;
//   float TargetWidth;
//   sampler2D input;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   SegmentWidth c0       1
//   TargetWidth  c1       1
//   TargetHeight c2       1
//   NumLines     c3       1
//   NumChars     c4       1
//   NumSegments  c5       1
//   input        s0       1
//

    ps_3_0
    def c6, 4, 1.39999998, 0.5, -1
    def c7, 0, 1, -0.5, -1
    def c8, -2, 3, -0.00100000005, -999.999939
    def c9, 0.699999988, 2.79999995, 0.5, -0.5
    def c10, 2.79999995, 1, -0.100000024, -0.75
    def c11, 0.699999988, 0, 0, -2
    defi i0, 255, 0, 0, 0
    dcl vPos.xy  // fragCoord<0,1>
    dcl_2d s0

#line 41 "C:\Development\dmd-extensions\LibDmd\Output\Virtual\AlphaNumeric\AlphaNum.fx"
    mov r0, c7  // ::br<1>
    mad r0.yz, c0.x, r0.xxyw, r0.xzxw
    add r0.yz, r0, c7.xxww  // ::dbl<0,1>

#line 68
    mov r1.x, c0.x  // ::SegmentWidth<0>
    mul r1.yz, r1.x, c9.xxyw  // ::ba<0>

#line 44
    mad r2.xy, r1.x, c6, c6.zwzw  // ::dp<0,1>

#line 135
    rcp r1.w, c4.x  // ::cellSize<0>

#line 140
    mad r2.z, r1.w, c9.z, c9.w  // ::originPos<0>

#line 145
    rcp r2.w, c1.x
    mad r3.x, vPos.x, r2.w, c7.z  // ::uv<0>
    rcp r2.w, c2.x
    dp2add r3.y, vPos.y, r2.w, c7.w  // ::uv<1>

#line 106
    rcp r2.w, c5.x
    frc r3.z, -r2.w
    add r4.x, r2.w, r3.z  // ::d<0>
    frc r2.w, -r1.w
    add r2.w, r1.w, r2.w  // ::d<1>

#line 68
    mul r3.z, r1.y, r1.y
    rcp r3.z, r3.z
    mad r3.w, r1.x, -c10.x, c10.y

#line 78
    mul r5.xy, r1.x, c10.zwzw

#line 69
    rcp r5.x, r5.x

#line 75
    mad r0.yz, c0.x, -r0.xxww, r0  // ::ba<0,1>

#line 78
    rcp r5.y, r5.y

#line 108
    mov r6.xzw, c7.x

#line 69
    mul r5.zw, r1.x, c11.xyxy

#line 108
    mov r4.zw, c7.x

#line 154
    mov r7.x, r2.z  // ::pos<0>
    mov r7.yzw, c7.x  // ::d<0>, ::charIndex<0>, ::character<0>
    rep i0
      break_ge r7.w, c4.x
      mad r8.xy, r7.x, -c7.yxzw, r3
      mul r9.x, r8.x, c4.x  // Seg::p<0>
      mul r9.y, r8.y, c3.x  // Seg::p<1>

#line 108
      mul r6.y, r2.w, r7.z
      texldl r8, r6, s0  // ::pixel<2>

#line 66
      add r8.xy, -r2, r9  // ::pa<0,1>
      mul r6.y, r1.y, r8.x
      mul r6.y, r3.z, r6.y
      max r8.w, r6.y, r1.z
      min r6.y, r3.w, r8.w  // ::t<0>
      mad r8.xy, r5.zwzw, -r6.y, r8  // Manhattan::v<0,1>

#line 48
      add r6.y, r8_abs.y, r8_abs.x  // ::Manhattan<0>

#line 69
      add r6.y, r6.y, -c0.x
      mul_sat r6.y, r5.x, r6.y
      mad r8.x, r6.y, c8.x, c8.y
      mul r6.y, r6.y, r6.y
      mul r6.y, r6.y, r8.x  // ::ShortLine<0>

#line 120
      cmp r6.y, -r8.z, c7.x, r6.y  // ::r<0>

#line 108
      mul r4.y, r2.w, r7.z
      texldl r8, r4, s0  // ::pixel<2>

#line 68
      mul r4.y, r9.x, c11.w
      max r8.x, r4.y, r1.z
      min r4.y, r3.w, r8.x  // ::t<0>
      mad r8.xy, r4.y, -c7.zxzw, r9  // Manhattan::v<0,1>

#line 48
      add r4.y, r8_abs.y, r8_abs.x  // ::Manhattan<0>

#line 69
      add r4.y, r4.y, -c0.x
      mul_sat r4.y, r5.x, r4.y
      mad r8.x, r4.y, c8.x, c8.y
      mul r4.y, r4.y, r4.y

#line 121
      mad r4.y, r8.x, r4.y, r6.y  // ::r<0>
      cmp r4.y, -r8.z, r6.y, r4.y  // ::r<0>

#line 74
      mad r8.xy, c0.x, -r0.xwzw, r9  // ::pa<0,1>
      mul r6.y, r8.x, c11.w
      max r8.z, r6.y, r1.z
      min r6.y, r3.w, r8.z  // ::t<0>
      mad r8.xy, r0.yzzw, -r6.y, r8
      mad r6.y, r1.x, c11.w, r8_abs.y
      mul_sat r6.y, r5.y, r6.y
      mad r8.y, r6.y, c8.x, c8.y
      mul r6.y, r6.y, r6.y
      mul r6.y, r6.y, r8.y
      add r8.x, r8_abs.x, c8.z
      mul r8.x, r8.x, c8.w
      max r9.x, r8.x, c7.x
      mad r8.x, r9.x, c8.x, c8.y
      mul r8.y, r9.x, r9.x
      mul r8.x, r8.y, r8.x

#line 123
      mad r4.y, r6.y, r8.x, r4.y  // ::r<0>

#line 155
      add r7.y, r4.y, r7.y  // ::d<0>
      add r7.x, r1.w, r7.x  // ::pos<0>

#line 154
      add r7.zw, r7, c7.y  // ::charIndex<0>, ::character<0>

#line 159
    endrep
    mov_sat oC0.x, r7.y  // ::main<0>

#line 167
    mov oC0.yzw, c7.xxxy  // ::main<1,2,3>

// approximately 93 instruction slots used (4 texture, 89 arithmetic)
